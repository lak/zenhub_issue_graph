#!/usr/local/bin/ruby

require 'optparse'
require 'issue_graph'
require 'yaml'
require 'ruby-graphviz'

def auth_info(file)
  begin
    result = YAML.load_file(file)
  rescue => detail
    puts "Could not read auth file #{file}: #{detail}"
    exit 1
  end

  fail "Must provide zenhub auth token" unless result['zenhub']
  fail "Must provide github auth token" unless result['github']

  result
end

def zenhub_client(auth)
  IssueGraph::ZenhubClient.new(auth['zenhub'], auth['github'])
  #@zenhub_client ||= IssueGraph::Client.new(auth['zenhub'], auth['github'])
  #@zenhub_client
end

def github_client(auth)
  Octokit::Client.new :access_token => auth['github'], :auto_paginate => true
  #@github_client ||= Octokit::Client.new :access_token => auth['github'], :auto_paginate => true
  #@github_client
end

options = {
  :auth_file => File.expand_path("~/etc/zenhub/auth.yaml")
}

option_parser = OptionParser.new do |parser|
	parser.banner = "Usage: template.rb [options]"

  parser.on("-a", "--auth") do |file|
    options[:auth_file] = file
  end

  parser.on("-h", "--help", "Print program help") do
      puts parser.help
      exit(0)
  end
end

option_parser.parse!

unless options.empty?
  # Do something with the options
end

auth = auth_info(options[:auth_file])

# Init the clients
gh_client = github_client(auth)
zh_client = zenhub_client(auth)

repository = ARGV.shift or raise "Must specify repository to query"

# This is the graph that contains everything.
issues = IssueGraph::Issue::Collection.new(repository, gh_client)

issues.load_issues()

# Get the epics first
result = zh_client.epics(repository)

epics = []

result["epic_issues"].each do |hash|
  hash[:is_epic] = true

  issue = issues.add_or_find(hash)

  epics << issue
end

# Then get the epic data
epics.each do |epic|
  result = zh_client.epic_data(repository, epic[:issue_number])

  result["issues"].each do |hash|
    issue = issues.add_or_find(hash)

    issues.add_edge(epic, issue)
  end
end

# Then the dependencies
result = zh_client.dependencies(repository)

result["dependencies"].each do |hash|
  blocking = issues.add_or_find(hash["blocking"])
  blocked = issues.add_or_find(hash["blocked"])

  issues.add_edge(blocked, blocking)
end

issues.print_graph("graph")
