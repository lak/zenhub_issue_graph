#!/usr/local/bin/ruby

require 'optparse'
require 'issue_graph'
require 'yaml'
require 'ruby-graphviz'

def auth_info(file)
  begin
    result = YAML.load_file(file)
  rescue => detail
    puts "Could not read auth file #{file}: #{detail}"
    exit 1
  end

  fail "Must provide zenhub auth token" unless result['zenhub']
  fail "Must provide github auth token" unless result['github']

  result
end

options = {
  :auth_file => File.expand_path("~/etc/zenhub/auth.yaml"),
  # Default to exluding closed tickets
  :closed_tickets => false,
}

option_parser = OptionParser.new do |parser|
	parser.banner = "Usage: issue_graph [-a <file>] [-c] <github_user/repository_name>
Create a PNG of the dependency graph in a zenhub repository.

Epics are rounded, with a red border. Everything else (except
closed tickets) is a rectangle.

Tickets from the specified repository are always gold. Every
other repository gets a custom (random) color.

"

  h = "Specify the auth file.

    You must provide an auth file with both a zenhub and github auth
    token. Format is in yaml:
      zenhub: <token>
      github: <token>

    The default location is ~/etc/zenhub/auth.yaml.

"
  parser.on("-a", "--auth", h) do |file|
    options[:auth_file] = file
  end

  h = "Include closed tickets in the graph.

    We default to not graphing closed tickets. They will have a dotted border,
    and be an octagon, instead of a solid border on a rectangle.

"
  parser.on("-c", "--include_closed_tickets", h) do |file|
    options[:closed_tickets] = true
  end

  parser.on("-h", "--help", "Print program help") do
      puts parser.help
      exit(0)
  end

  h = "What to name the output file.

    Defaults to repo name.

    Do not provide the file extension. It is always a PNG file,
    so we handle the extension.

"
  parser.on("-o", "--output_file_name", h) do |file|
    options[:file_name] = file
  end
end

option_parser.parse!

auth = auth_info(options[:auth_file])
repository = ARGV.shift or raise "Must specify repository to query"

# This is the graph that contains everything.
issues = IssueGraph::Issue::Collection.new(repository, auth)

issues.build_issue_graph()
name = options[:file_name] || repository.sub(%r{.+/}, '')

issues.print_graph(name, options[:closed_tickets])
