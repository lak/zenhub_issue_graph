#!/usr/local/bin/ruby -w

require 'optparse'
require 'zenhub_ruby'
require 'zenhub_ruby/issue'
require 'yaml'

def auth_info(file)
  begin
    result = YAML.load_file(file)
  rescue => detail
    puts "Could not read auth file #{file}: #{detail}"
    exit 1
  end

  fail "Must provide zenhub auth token" unless result['zenhub']
  fail "Must provide github auth token" unless result['github']

  result
end

options = {
  :auth_file => File.expand_path("~/etc/zenhub/auth.yaml")
}

option_parser = OptionParser.new do |parser|
	parser.banner = "Usage: template.rb [options]"

  parser.on("-a", "--auth") do |file|
    options[:auth_file] = file
  end

  parser.on("-h", "--help", "Print program help") do
      puts parser.help
      exit(0)
  end
end

option_parser.parse!

unless options.empty?
  # Do something with the options
end

auth = auth_info(options[:auth_file])
client = ZenhubRuby::Client.new(auth['zenhub'], auth['github'])
result = client.dependencies("clicketycorp/product_planning")

pp result

issues = ZenhubRuby::Issue::Collection.new

result["dependencies"].each do |hash|
  # Each of these dependencies is an edge. It is specified each way.
  blocking_name = ZenhubRuby::Issue.name_from_hash(hash["blocking"])
  blocked_name = ZenhubRuby::Issue.name_from_hash(hash["blocked"])
  #blocking = hash["blocking"]
  #blocked = hash["blocked"]

  blocking_issue = issues[blocking_name]
  blocked_issue = issues[blocked_name]

  blocked_issue.blocked_by(blocking_issue)
  blocking_issue.blocking(blocked_issue)
end

issues.print_tree
